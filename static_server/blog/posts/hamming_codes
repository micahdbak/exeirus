Hamming Codes
C555
0 23 12 2022
Dear e\(sx\)seirus,
\P
Do you know about Hamming codes?
\(sI\)s think the ability to decode Hamming codes is going to be important.
Essentially, they are a method for verifying transmitted data's "validity;"
it is a method to determine which bit in a block of data is corrupted, if such a bit exists.
\P
Suppose that some computer A intends to send some data X to computer B,
but in the transmission of X, some of its bits have been corrupted.
Well, if computer A has encoded X using Hamming codes,
then computer B can know exactly which bit has been corrupted, and fix it accordingly.
\P
<img src="$DOMAIN$/$BLOG$/static/HC_1.png">\n
\(bFig. 1\)b
\P
\(bFig. 1\)b shows a 4x4 grid, where each pixel represents a bit.
The purple square is dedicated to the entire block's parity.
Parity is essentially whether or not a block's count of 1s is even, or odd, excluding the parity bit.
The parity for an even block is 0, and the parity for an odd block is 1.
\P
For example, given the block
\P
\(m\(L
- 1 0 1\n
1 0 1 0\n
0 1 0 1\n
1 0 1 0\n
\)L\)m
\P
There are 8 1s, which is even.
So therefore the parity of this block is 0.
This block then becomes
\P
\(m\(L
- 1 0 1\n
1 0 1 0\n
0 1 0 1\n
1 0 1 0\n
\)L\)m
\P
As the parity bit is set.
\P
However, imagine that the following block is given.
\P
\(m\(L
- 1 0 1\n
1 0 1 0\n
0 1 0 1\n
0 0 1 0\n
\)L\)m
\P
There are 7 1s, which is odd.
The parity of this block is 1, so the parity bit would be set to 1.
The block now becomes
\P
\(m\(L
1 1 0 1\n
1 0 1 0\n
0 1 0 1\n
0 0 1 0\n
\)L\)m
\P
Which, conveniently, now has 8 1s.
This is the purpose of the parity bit for a given block;
it ensures that, so long as the data is valid, the total count of 1s is even.
So, if the total count of 1s in a block is odd, a data receiver can know that \(isome\)i bit was corrupted.
But this information is useless if the receiver cannot know \(iwhich\)i bit was corrupted.
\P
This is where the red squares of \(bFig. 1\)b come in.
These bits are parity checks for certain regions of the block of data.
\P
<img src="$DOMAIN$/$BLOG$/static/HC_2.png">\n
\(bFig. 2\)b
\P
Observing \(bFig. 2\)b, we can see that the white outlined bit is set to the parity of the highlighted region.
Essentially, that bit ensures that that region has an even number of 1s.
If we suppose for a moment that the receiver notices that this region has an odd number of bits,
then the corrupted bit must be in that region.
\P
\(bFig. 3\)b, \(bFig. 4\)b, and \(bFig. 5\)b show which bit is associated with which region's parity.
\P
<img src="$DOMAIN$/$BLOG$/static/HC_3.png">\n
\(bFig. 3\)b
\P
<img src="$DOMAIN$/$BLOG$/static/HC_4.png">\n
\(bFig. 4\)b
\P
<img src="$DOMAIN$/$BLOG$/static/HC_5.png">\n
\(bFig. 5\)b
\P
Looking back to \(bFig. 1\)b, we can see that for a Hamming code of 16 bits we can transmit 11 bits of data.
Suppose that our data is
\P
\(m\(L
1 1 0 1 1 0 0 1 1 1 0
\)L\)m
\P
Then we can arrange these bits to create a Hamming code (the sender's job):
\P
\(m\(L
- - - 1\n
- 1 0 1\n
- 1 0 0\n
1 1 1 0
\)L\)m
\P
Starting by solving each parity bit with respect to its region, we get the incomplete Hamming code:
\P
\(m\(L
- 1 1 1\n
1 1 0 1\n
0 1 0 0\n
1 1 1 0
\)L\)m
\P
Then, we set the first bit to be the entire block's parity,
thereby ensuring the total count of 1s is even.
The count of 1s is 10, which is even, so the parity bit should be set to 0.
Our final Hamming code is:
\P
\(m\(L
0 1 1 1\n
1 1 0 1\n
0 1 0 0\n
1 1 1 0
\)L\)m
\P
Perfect!
Now, suppose that computer A sends this Hamming code to computer B;
but, one of the bits is corrupted.
The Hamming code that computer B receives is the following,
where the underlined bit is the one that was corrupted:
\P
\(m\(L
0 1 1 1\n
1 1 0 1\n
0 1 \(u1\)u 0\n
1 1 1 0
\)L\)m
\P
First, computer B will notice that there are 11 1s in the data it received, which is odd.
It must be that a bit was corrupted!
\P
Observing each parity bit's region for validity
(the italicized bit is the parity bit that is being checked,
and the bolded bits are the bits that could be corrupted;
either the parity bit's region is eligible if its region is odd,
or the outside region is eligible if its region is even),
computer B will see that the following columns are eligible:
\P
\(m\(L
\(b0\)b \(i1\)i \(b1\)b 1\n
\(b1\)b 1 \(b0\)b 1\n
\(b0\)b 1 \(b\(u1\)u\)b 0\n
\(b1\)b 1 \(b1\)b 0
\)L\)m
\P
And
\P
\(m\(L
0 1 \(b\(i1\)i 1\)b\n
1 1 \(b0 1\)b\n
0 1 \(b\(u1\)u 0\)b\n
1 1 \(b1 0\)b
\)L\)m
\P
Which can only be the column:
\P
\(m\(L
0 1 \(b1\)b 1\n
1 1 \(b0\)b 1\n
0 1 \(b\(u1\)u\)b 0\n
1 1 \(b1\)b 0
\)L\)m
\P
Making the same observations for the remaining parity bits:
\P
\(m\(L
\(b0 1 1 1\)b\n
\(i1\)i 1 0 1\n
\(b0 1 \(u1\)u 0\)b\n
1 1 1 0
\)L\)m
\P
And
\P
\(m\(L
0 1 1 1\n
1 1 0 1\n
\(b\(i0\)i 1 \(u1\)u 0\)b\n
\(b1 1 1 0\)b
\)L\)m
\P
Which can only be the row:
\P
\(m\(L
0 1 1 1\n
1 1 0 1\n
\(b0 1 \(u1\)u 0\)b\n
1 1 1 0
\)L\)m
\P
Combining these observations,
knowing that the intersection of these eligible regions is the area where the corrupted bit may be,
there is only one position that the corrupted bit can be:
\P
\(m\(L
0 1 1 1\n
1 1 0 1\n
0 1 \(b\(u1\)u\)b 0\n
1 1 1 0
\)L\)m
\P
And so computer B switches this bit, and is happy with its valid data,
the data that computer A intended for computer B to receieve:
\P
\(m\(L
0 1 1 1\n
1 1 0 1\n
0 1 0 0\n
1 1 1 0
\)L\)m
\P

Happy hacking.
